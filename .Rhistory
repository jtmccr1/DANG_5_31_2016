require(plyr)
require(reshape2)
require(plyr)
require(reshape2)
p_dnk<-function(n,N,k){ # n= number of marbles N=possibe colors k=# of colors in n draws
#The sum term is the trickiest. here it is
i<-1:k-1
I<-c()
for (i in 1:k-1){
I[i]<-choose(k,i)*(((k-i)/k)^n)*(-1)^(i+1)
}
B_A<-1-sum(I)
A=(k/N)^n
if(n==0){
0
}else{
choose(N,k)*A*B_A
}
p_dnk.v<-Vectorize(p_dnk)
draws=1:20
colors=1:4
out.l<-expand.grid(draws,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
x<-subset(out.l,n<6)
require(ggplot2)
expected<-data.frame(k=1:4,prob=c(0.33,0.37,0.26,0.04),n=10)
ggplot(x,aes(x=k,y=prob,color=as.factor(n)))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")
p_dnkt<-function(n,N,k){ # n= number of marbles N=possibe colors k=# of colors in n draws
#The sum term is the trickiest. here it is
i<-1:k-1
I<-c()
for (i in 1:k-1){
I[i]<-choose(k,i)*(((k-i)/k)^n)*(-1)^(i+1)
}
B_A<-1-sum(I)
A=(k/N)^n
choose(N,k)*A*B_A
}
p_dnkt.v<-Vectorize(p_dnk)
lambda<-rpois(n = 1000,lambda = 3)
colors=1:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnkt.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=means,aes(x=k,y=prob))
colors=0:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnkt.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=means,aes(x=k,y=prob))
# from https://stat.ethz.ch/pipermail/r-help/2005-May/070683.html
p_dnkt<-function(n,N,k){ # n= number of marbles N=possibe colors k=# of colors in n draws
#The sum term is the trickiest. here it is
i<-1:k-1
I<-c()
for (i in 1:k-1){
I[i]<-choose(k,i)*(((k-i)/k)^n)*(-1)^(i+1)
}
B_A<-1-sum(I)
A=(k/N)^n
choose(N,k)*A*B_A
}
p_dnkt.v<-Vectorize(p_dnk)
rtpois<-function(N,lambda){
qpois(runif(N,dpois(0,lambda),1),lambda)
}
lambda<-rtpois(n = 1000,lambda = 3)
colors=0:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=means,aes(x=k,y=prob))
lambda<-rtpois(n = 1000,lambda = 2)
colors=0:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=means,aes(x=k,y=prob))
lambda<-rtpois(N = 1000,lambda = 2)
colors=0:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=means,aes(x=k,y=prob))
lambda<-rtpois(N = 1000,lambda = 3)
colors=0:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=
means,aes(x=k,y=prob))
k=c(rep(1,9))
k
k=c(rep(1,9),rep(2,10),rep(3,7),rep(4,3))
k
p_dnk<-function(n,N,k,log=F){ # n= number of marbles N=possibe colors k=# of colors in n draws
#The sum term is the trickiest. here it is
i<-1:k-1
I<-c()
for (i in 1:k-1){
I[i]<-choose(k,i)*(((k-i)/k)^n)*(-1)^(i+1)
}
B_A<-1-sum(I)
A=(k/N)^n
if(log==F){
choose(N,k)*A*B_A
}else{
log(choose(N,k)*A*B_A)
}
p_dnk.v<-Vectorize(p_dnk)
draws=1:20
colors=1:4
out.l<-expand.grid(draws,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
x<-subset(out.l,n<6)
require(ggplot2)
expected<-data.frame(k=1:4,prob=c(0.33,0.37,0.26,0.04),n=10)
ggplot(x,aes(x=k,y=prob,color=as.factor(n)))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")
llpnk<-function(n,N,k){ # k is a vector
-sum(p_dnk.v(n = n,N=N,k=k,log=T))
}
llpnk(2,4,k)
p_dnk.v(n = n,N=N,k=k,log=T)
p_dnk.v(2,4,k)
p_dnk.v(2,4,k,log=T)
log(1)
log(1E-6)
p_dnk.v(100,4,k,)
require(plyr)
require(reshape2)
p_dnk<-function(n,N,k,log=F){ # n= number of marbles N=possibe colors k=# of colors in n draws
#The sum term is the trickiest. here it is
i<-1:k-1
I<-c()
for (i in 1:k-1){
I[i]<-choose(k,i)*(((k-i)/k)^n)*(-1)^(i+1)
}
B_A<-1-sum(I)
A=(k/N)^n
x<-choose(N,k)*A*B_A
if(x==0){
x<-1E-100 # to avoid Inf in the optimization process
}
if(log==F){
x
}else{
log(x)
}
p_dnk.v<-Vectorize(p_dnk)
draws=1:20
colors=1:4
out.l<-expand.grid(draws,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
x<-subset(out.l,n<6)
require(ggplot2)
expected<-data.frame(k=1:4,prob=c(0.33,0.37,0.26,0.04),n=10)
ggplot(x,aes(x=k,y=prob,color=as.factor(n)))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")
llpnk<-function(n,N,k){ # k is a vector
-sum(p_dnk.v(n = n,N=N,k=k,log=T))
}
llpnk(2,4,k)
require(bbmle)
m1<-mle2(minuslogl = llpnk,start = list(n=3),data=list(N=4,k=k))
llpnk(4,4,k)
llpnk(5,4,k)
llpnk(6,4,k)
llpnk(100,4,k)
llpnk(2,4,k)
llpnk(5,4,k)
llpnk(1000,4,k)
llpnk(0,4,k)
llpnk(10.1,4,k)
m1
optim(fn=llpnk,par=c(n=3),N=4,k=k)
optim(fn=llpnk,par=c(n=3),N=4,k=k,method="BFGS")
?optim
optim(fn=llpnk,par=c(n=3),N=4,k=k,method="L-BFGS-B",lower=0)
optim(fn=llpnk,par=c(n=3),N=4,k=k,method="L-BFGS-B",lower=1)
optim(fn=llpnk,par=c(n=3),N=4,k=k,method="Nelder-Mead")
optim(fn=llpnk,par=c(n=3),N=4,k=k,method="Brent")
optim(fn=llpnk,par=c(n=3),N=4,k=k,method="Brent",lower=0,upper=100)
m1<-mle2(minuslogl = llpnk,start = list(n=3),data=list(N=4,k=k),method="Nelder-Mead")
m1
plot(m1)
n=seq(1:10,by=0.1)
n=seq(1,10,by=0.1)
data$n=seq(1,10,by=0.1)
data<-data.frame(n=seq(1,10,by=0.1))
data<-mutate(data,ll=llpnk(n,N,k))
data<-mutate(data,ll=llpnk(n,4,k))
data
n=seq(1,10,by=0.1))
n=seq(1,10,by=0.1)
ll=llpnk(n,4,k))
ll=llpnk(n,4,k)
ll
i=1
ll<-c()
for(n in seq(1,10,by=0.1)){
ll[i]=llpnk(n,4,k)
i=i+1
}
ll
plot(ll,seq(1,10,by=0.1))
plot(seq(1,10,by=0.1),ll)
i=1
ll<-c()
for(n in seq(2,10,by=0.1)){
ll[i]=llpnk(n,4,k)
i=i+1
}
ll
i=1
ll<-c()
for(n in seq(2,10,by=0.1)){
ll[i]=exp(-llpnk(n,4,k))
i=i+1
}
plot(seq(1,10,by=0.1),ll)
plot(seq(2,10,by=0.1),ll)
plot(seq(2,10,by=0.1),ll,lty=2)
plot(seq(2,10,by=0.1),ll,lty=1)
plot(seq(2,10,by=0.1),ll,lty='l')
data.frame(n=seq(2,10,by=0.1),ll=ll)->op
ggplot(op,aes(x=n,y=ll))+geom_line()
ggplot(op,aes(x=n,y=ll))+geom_line()+scale_y_log10()
ggplot(op,aes(x=n,y=ll))+geom_line()
# from https://stat.ethz.ch/pipermail/r-help/2005-May/070683.html
rtpois<-function(N,lambda){
qpois(runif(N,dpois(0,lambda),1),lambda)
}
lambda<-rtpois(N = 1000,lambda = 3)
colors=0:4
out.l<-expand.grid(lambda,colors)
out.l<-rename(out.l,c("Var1"="n", "Var2"="k"))
out.l<-mutate(out.l, prob=p_dnk.v(n,4,k))
means<-ddply(out.l,~k,summarize,prob=mean(prob))
ggplot(out.l,aes(x=k,y=prob))+geom_point()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")+geom_line(data=means,aes(x=k,y=prob))
llpt<-function(lambda,N,k){ # k is a vector
n<-rtpois(N = 1000,lambda = lambda)
ll<-c()
for(i in 1:1000){
ll[i]=-sum(p_dnk.v(n = n[i],N=N,k=k,log=T))
}
sum(ll)
}
llpt(3,4,k)
llpt(100,4,k)
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Nelder-Mead")
llpt<-function(lambda,N,k){ # k is a vector
n<-rtpois(N = 10,lambda = lambda)
ll<-c()
for(i in 1:10){
ll[i]=-sum(p_dnk.v(n = n[i],N=N,k=k,log=T))
}
sum(ll)
}
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Nelder-Mead")
m2
llpt<-function(lambda,N,k){ # k is a vector
n<-rtpois(N = 100,lambda = lambda)
ll<-c()
for(i in 1:100){
ll[i]=-sum(p_dnk.v(n = n[i],N=N,k=k,log=T))
}
sum(ll)
}
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Nelder-Mead")
m2
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Brent")
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Brent"lower=1,upper=10)
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Brent",lower=1,upper=10)
m2
m1<-mle2(minuslogl = llpnk,start = list(n=3),data=list(N=4,k=k),method="Brent",lower=1,upper=10)
m1
m2
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Brent",lower=1,upper=100)
m2
n<-rtpois(N = 100,9.853698 )
n
p_dnk<-function(n,N,k,log=F){ # n= number of marbles N=possibe colors k=# of colors in n draws
#The sum term is the trickiest. here it is
i<-1:k-1
I<-c()
for (i in 1:k-1){
I[i]<-choose(k,i)*(((k-i)/k)^n)*(-1)^(i+1)
}
B_A<-1-sum(I)
A=(k/N)^n
x<-choose(N,k)*A*B_A
if(x==0){
x<-1E-50 # to avoid Inf in the optimization process
}
if(log==F){
x
}else{
log(x)
}
p_dnk.v<-Vectorize(p_dnk)
llpt<-function(lambda,N,k){ # k is a vector
n<-rtpois(N = 100,lambda = lambda)
ll<-c()
for(i in 1:100){
ll[i]=-sum(p_dnk.v(n = n[i],N=N,k=k,log=T))
}
sum(ll)
}
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Brent",lower=1,upper=100)
m2
names(m2)
m2$par
m2$coef
m2$lambda
m2$coeffients
m2[1]
m2@coef
m2@coef[1]
m2@coef/2
data.frame(k=1:4)
data.frame(k=1:4)->out.l
out.l<-mutate(out.l, prob=p_dnk.v(m1@coef,4,k))
out.l
ggplot(x,aes(x=k,y=prob)+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")
ggplot(x,aes(x=k,y=prob))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")
ggplot(out.l,aes(x=k,y=prob))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected,aes(x=k,y=prob),color="red")
out.l
expected
ggplot(out.l,aes(x=k,y=prob))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected[,1:2],aes(x=k,y=prob),color="red")
ggplot(out.l,aes(x=k,y=prob))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected[1:2,],aes(x=k,y=prob),color="red")
expected[1:2,]
ggplot(out.l,aes(x=k,y=prob))+geom_point()+geom_line(aes(group=n))+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected[,1:2],aes(x=k,y=prob),color="red")
pected[,1:2]
expected[,1:2]
ggplot(out.l,aes(x=k,y=prob))+geom_point()+geom_line()+xlab("Barcodes represented")+theme_classic()+ylab("Probability")+guides(color=guide_legend(title="Bottle Neck size"))+geom_point(data=expected[,1:2],aes(x=k,y=prob),color="red")
k10<-c(rep(1,4),rep(2,2),rep(3,1))
m10<-mle2(minuslogl = llpnk,start = list(n=3),data=list(N=10,k=k10),method="Brent",lower=1,upper=10)
m10
llpt<-function(lambda,N,k){ # k is a vector
n<-rtpois(N = 100,lambda = lambda)
ll<-c()
for(i in 1:100){
ll[i]=-sum(p_dnk.v(n = n[i],N=N,k=k,log=T))
}
mean(ll)
}
m2<-mle2(minuslogl = llpt,start = list(lambda=3.25),data=list(N=4,k=k),method="Brent",lower=1,upper=100)
m2
p_dnk(8,4,1)
10000*0.6E-6
10000/6000
6000/10000
install.package("ploty")
install.packages("ploty")
install.packages("plotly")
source('~/Interactive_validation_plots/experimental.population.R', echo=TRUE)
Hiseq.roc
ploty(Hiseq.roc)
ggplotly(Hiseq.roc)
Hiseq.roc<-ggplot(subset(h.roc.df,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity))+geom_step(aes(color=exp.freq),size=2)+scale_color_manual(values=rhg_cols,name="Frequency",labels=c("5.0%","2.0%","1.0%","0.5%","0.2%"))+xlab(bquote("1-Specificity (x"~10^-3~")"))+ylab("Sensitivity")+guides(color=guide_legend(title="Frequency"))+scale_y_continuous(limits=c(0,1))+scale_x_continuous(limits=c(0,0.005),breaks=c(0,0.001,0.002,0.003,0.004,0.005),labels=c(0:5))+theme(legend.position="none")+geom_text(data=subset(x,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity,label=frequency),hjust=-0.2)
ggplotly(Hiseq.roc)
test<-ggdraw() +
draw_plot(hiseq.setup, 0.1, .57, 0.8, 0.43) + #x y width height
draw_plot(Hiseq.roc, 0.05, 0.33, .8, 0.33) +
draw_plot(tbl, 0.05, 0, .9, 0.33) +
draw_plot_label(c("A", "B", "C"), c(0.01, 0.01, 0.01), c(1, 0.7, 0.35), size = 15)
test<-ggdraw() +
#draw_plot(hiseq.setup, 0.1, .57, 0.8, 0.43) + #x y width height
draw_plot(Hiseq.roc, 0.05, 0.33, .8, 0.33) +
draw_plot(tbl, 0.05, 0, .9, 0.33) +
draw_plot_label(c("A", "B", "C"), c(0.01, 0.01, 0.01), c(1, 0.7, 0.35), size = 15)
ggplotly(test)
source('~/Interactive_validation_plots/experimental.population.R', echo=TRUE)
h.roc.df<-h.roc.df[order(h.roc.df$threshold),]
Hiseq.roc<-ggplot(subset(h.roc.df,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity))+geom_step(aes(color=exp.freq),size=2)+scale_color_manual(values=rhg_cols,name="Frequency",labels=c("5.0%","2.0%","1.0%","0.5%","0.2%"))+xlab(bquote("1-Specificity (x"~10^-3~")"))+ylab("Sensitivity")+guides(color=guide_legend(title="Frequency"))+scale_y_continuous(limits=c(0,1))+scale_x_continuous(limits=c(0,0.005),breaks=c(0,0.001,0.002,0.003,0.004,0.005),labels=c(0:5))+theme(legend.position="none")+geom_text(data=subset(x,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity,label=frequency),hjust=-0.2)
ggplotly(Hiseq.roc)
h.roc.df<-h.roc.df[order(h.roc.df$adj.sensitivity,h.roc.df$adj.specificity),]
Hiseq.roc<-ggplot(subset(h.roc.df,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity))+geom_step(aes(color=exp.freq),size=2)+scale_color_manual(values=rhg_cols,name="Frequency",labels=c("5.0%","2.0%","1.0%","0.5%","0.2%"))+xlab(bquote("1-Specificity (x"~10^-3~")"))+ylab("Sensitivity")+guides(color=guide_legend(title="Frequency"))+scale_y_continuous(limits=c(0,1))+scale_x_continuous(limits=c(0,0.005),breaks=c(0,0.001,0.002,0.003,0.004,0.005),labels=c(0:5))+theme(legend.position="none")+geom_text(data=subset(x,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity,label=frequency),hjust=-0.2)
Hiseq.roc
ggplotly(Hiseq.roc)
h.roc.df<-h.roc.df[order(h.roc.df$adj.specificity,h.roc.df$adj.sensitivity),]
Hiseq.roc<-ggplot(subset(h.roc.df,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity))+geom_step(aes(color=exp.freq),size=2)+scale_color_manual(values=rhg_cols,name="Frequency",labels=c("5.0%","2.0%","1.0%","0.5%","0.2%"))+xlab(bquote("1-Specificity (x"~10^-3~")"))+ylab("Sensitivity")+guides(color=guide_legend(title="Frequency"))+scale_y_continuous(limits=c(0,1))+scale_x_continuous(limits=c(0,0.005),breaks=c(0,0.001,0.002,0.003,0.004,0.005),labels=c(0:5))+theme(legend.position="none")+geom_text(data=subset(x,gc==5),aes(x=1-adj.specificity,y=adj.sensitivity,label=frequency),hjust=-0.2)
ggplotly(Hiseq.roc)
fig.1.df<-subset(h.roc.df,gc==5)
head(fig.1.df)
p <- plot_ly(economics, x = date, y = uempmed, name = "unemployment")
p %>% add_trace(y = fitted(loess(uempmed ~ as.numeric(date))))
cov<-read.csv('~/Desktop/all.coverage.csv')
head(cov)
cov<-subset(cov,!(grepl("01",Id) & !(grepl("2_",Id)))
)
head(cov)
tail(cov)
dim(cov)
cov<-subset(cov,!(grepl("01",Id)) & !(grepl("2_",Id)))
dim(cov)
head(cov)
cov<-subset(cov,!(grepl("01",Id)) & !(grepl("2_",Id) & chr.pos>13))
head(cov)
mean(cov$coverage)
shiny::runApp('Desktop/benchmarking_shiny/20_mut_data_set')
runApp('Desktop/benchmarking_shiny/20_mut_data_set')
setwd("~/Desktop/benchmarking_shiny/20_mut_data_set")
source('~/Desktop/benchmarking_shiny/20_mut_data_set/preprocessing.R', echo=TRUE)
warnings()
source('~/Desktop/benchmarking_shiny/20_mut_data_set/processing.R', echo=TRUE)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
setwd("/Users/jt/Desktop/projects/talks/Dang
")
setwd("/Users/jt/Desktop/projects/talks/Dang")
require(slidify)
author("interactive_plots")
runDeck()
require(slidifyLibraries)
runDeck()
require(slidifyLibraries)
runDeck()
runDeck("./")
devtools::install_github("ramnathv/slidify")
require(slidify)
require(slidifyLibraries)
setwd("/Users/jt/Desktop/projects/talks/Dang")
runDeck("./interactive_plots/")
print(wd())
wd()
require(root)
runDeck("./interactive_plots/")
list.files("./apps")
list.files("./apps"/)
list.files("./apps/")
list.files("./")
runDeck("./interactive_plots/")
setwd("./interactive_plots/")
runDeck("./interactive_plots/")
runDeck("./")
data("mtcars")
head(mtcars)
runDeck("./")
head(mtcars)
ggplot(mtcars,aes(x=mpg,y=qsec))+geom_point()
ggplot(mtcars,aes(x=mpg,y=qsec,fill=as.factor(cyl)))+geom_point()
ggplot(mtcars,aes(x=mpg,y=qsec,color=as.factor(cyl)))+geom_point()
max(mtcars$hp)
runDeck("./")
require(shiny)
runDeck("./")
unique(mtcars$cyl)
runDeck("./")
data<-read.csv("./apps/processed_data/no.dups.bonferroni.bin.sum.csv")
head(data)
head(subset(data,select=c(chr,pos,ref,var,p.val,freq.var,MapQ,Read_pos,Phred,category,exp.freq,gc))
)
slidify("./")
slidify("./index.Rmd")
setwd("~/Desktop/DANG_5_31_2016")
require(slidify)
runDeck("./")
runDeck("./")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
data<-read.csv("./apps/processed_data/no.dups.bonferroni.bin.sum.csv")
head(subset(data,select=c(gc,exp.freq,mutation,pos,p.val,freq.var,MapQ,Read_pos,Phred,category)),n=3)
head(round(subset(data,select=c(gc,exp.freq,mutation,pos,p.val,freq.var,MapQ,Read_pos,Phred,category)),n=3),3)
data<-apply(X = data,MARGIN = 1,FUN = function(x) if(is.numeric(x)) x<-round(x,2))
data
data<-read.csv("./apps/processed_data/no.dups.bonferroni.bin.sum.csv")
data<-apply(X = data,MARGIN = 1,FUN = function(x) if(is.numeric(x)) x<-round(x,2) else x)
data
head(data)
data<-read.csv("./apps/processed_data/no.dups.bonferroni.bin.sum.csv")
data<-apply(X = data,MARGIN = 2,FUN = function(x) if(is.numeric(x)) x<-round(x,2) else x)
head(data)
data<-read.csv("./apps/processed_data/no.dups.bonferroni.bin.sum.csv",stringsAsFactors = F)
sub<-head(subset(data,select=c(gc,exp.freq,mutation,pos,p.val,freq.var,MapQ,Read_pos,Phred,category)),n=3)
apply(X = sub,MARGIN = 2,FUN = function(x) if(is.numeric(x)) x<-round(x,2) else x)
class(sub$p.val)
apply(X = sub,MARGIN = 2,FUN = function(x) if(class(x)=="numeric") x<-round(x,2) else x)
apply(X = sub,MARGIN = 2,FUN = function(x) if(class(x)=="numeric") return(round(x,2)) else x)
apply(X = sub,MARGIN = 1,FUN = function(x) if(class(x)=="numeric") return(round(x,2)) else x)
sub
apply(X = sub,MARGIN = 2,FUN = function(x) class(x) )
class(sub$MapQ)
apply(X = as.matrix(sub),MARGIN = 2,FUN = function(x) class(x) )
head(subset(data,select=c(gc,exp.freq,mutation,pos,p.val,freq.var,MapQ,Read_pos,Phred,category)),n=3)
slidify("index.Rmd")
slidify("index.Rmd")
runDeck("./")
shiny::runApp("./apps/example/")
## Error in shiny::shinyAppDir(("./apps/example/", package = "shiny"), : No Shiny application exists at the path ""
devtools::install_github("wch/webshot")
